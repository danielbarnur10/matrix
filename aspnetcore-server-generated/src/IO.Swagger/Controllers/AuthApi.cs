/*
 * Calculator API
 *
 * REST API that performs a math operation on two numbers via POST. The operation is provided in the `X-Operation` header (add, subtract, multiply, divide). Secured with Bearer JWT. Includes an Auth endpoint to mint a short-lived token for testing. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AuthApiController : ControllerBase
    { 
        /// <summary>
        /// Issue a JWT token for testing
        /// </summary>
        /// <remarks>Returns a short-lived JWT (includes &#x60;exp&#x60;) signed with your app key.</remarks>
        /// <param name="username">Optional username to include as the &#x60;sub&#x60; claim.</param>
        /// <response code="200">Token issued</response>
        [HttpPost]
        [Route("/api/auth/token")]
        [ValidateModelState]
        [SwaggerOperation("ApiAuthTokenPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Token issued")]
        public virtual IActionResult ApiAuthTokenPost([FromQuery]string username)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));
            string exampleJson = null;
            exampleJson = "{\n  \"expiresAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"token\" : \"token\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
                        : default(InlineResponse200);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
