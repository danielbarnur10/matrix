/*
 * Calculator API
 *
 * REST API that performs a math operation on two numbers via POST. The operation is provided in the `X-Operation` header (add, subtract, multiply, divide). Secured with Bearer JWT. Includes an Auth endpoint to mint a short-lived token for testing. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CalculatorApiController : ControllerBase
    { 
        /// <summary>
        /// Perform a math operation
        /// </summary>
        /// <remarks>Executes the operation given by the &#x60;X-Operation&#x60; header on two numbers provided in the request body. </remarks>
        /// <param name="body"></param>
        /// <param name="xOperation">Operation to perform</param>
        /// <response code="200">Successful calculation</response>
        /// <response code="400">Bad request (missing header / invalid operation / division by zero)</response>
        /// <response code="401">Unauthorized (missing/invalid bearer token)</response>
        [HttpPost]
        [Route("/api/calculator")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiCalculatorPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "Successful calculation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request (missing header / invalid operation / division by zero)")]
        public virtual IActionResult ApiCalculatorPost([FromBody]OperationRequest body, [FromHeader][Required()]string xOperation)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0.8008281904610115\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
                        : default(InlineResponse2001);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
